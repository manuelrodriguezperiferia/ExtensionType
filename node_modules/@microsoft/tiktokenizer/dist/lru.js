"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LRUCache = void 0;
/** A simple O(1) LRU cache. */
class LRUCache {
    constructor(size) {
        this.size = size;
        this.nodes = new Map();
    }
    get(key) {
        const node = this.nodes.get(key);
        if (node) {
            this.moveToHead(node);
            return node.value;
        }
        return undefined;
    }
    set(key, value) {
        const node = this.nodes.get(key);
        if (node) {
            node.value = value;
            this.moveToHead(node);
        }
        else {
            const newNode = new Node(key, value);
            this.nodes.set(key, newNode);
            this.addNode(newNode);
            if (this.nodes.size > this.size) {
                this.nodes.delete(this.tail.key);
                this.removeNode(this.tail);
            }
        }
    }
    moveToHead(node) {
        this.removeNode(node);
        this.addNode(node);
    }
    addNode(node) {
        if (this.head) {
            this.head.prev = node;
            node.next = this.head;
        }
        if (!this.tail) {
            this.tail = node;
        }
        this.head = node;
    }
    removeNode(node) {
        if (node.prev) {
            node.prev.next = node.next;
        }
        else {
            this.head = node.next;
        }
        if (node.next) {
            node.next.prev = node.prev;
        }
        else {
            this.tail = node.prev;
        }
    }
}
exports.LRUCache = LRUCache;
class Node {
    constructor(key, value) {
        this.key = key;
        this.value = value;
    }
}
//# sourceMappingURL=lru.js.map