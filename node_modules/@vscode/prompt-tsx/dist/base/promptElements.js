"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation and GitHub. All rights reserved.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrioritizedList = exports.TextChunk = exports.AssistantMessage = exports.UserMessage = exports.SystemMessage = exports.BaseChatMessage = exports.isChatMessagePromptElement = void 0;
const openai_1 = require("./openai");
const promptElement_1 = require("./promptElement");
function isChatMessagePromptElement(element) {
    return (element instanceof SystemMessage ||
        element instanceof UserMessage ||
        element instanceof AssistantMessage);
}
exports.isChatMessagePromptElement = isChatMessagePromptElement;
class BaseChatMessage extends promptElement_1.PromptElement {
    render() {
        return vscpp(vscppf, null, this.props.children);
    }
}
exports.BaseChatMessage = BaseChatMessage;
/**
 * A {@link PromptElement} which can be rendered to an OpenAI system chat message.
 *
 * See {@link https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages}
 */
class SystemMessage extends BaseChatMessage {
    constructor(props) {
        props.role = openai_1.ChatRole.System;
        super(props);
    }
}
exports.SystemMessage = SystemMessage;
/**
 * A {@link PromptElement} which can be rendered to an OpenAI user chat message.
 *
 * See {@link https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages}
 */
class UserMessage extends BaseChatMessage {
    constructor(props) {
        props.role = openai_1.ChatRole.User;
        super(props);
    }
}
exports.UserMessage = UserMessage;
/**
 * A {@link PromptElement} which can be rendered to an OpenAI assistant chat message.
 *
 * See {@link https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages}
 */
class AssistantMessage extends BaseChatMessage {
    constructor(props) {
        props.role = openai_1.ChatRole.Assistant;
        super(props);
    }
}
exports.AssistantMessage = AssistantMessage;
/**
 * A chunk of single-line or multi-line text that is a direct child of a {@link ChatMessagePromptElement}.
 *
 * TextChunks can only have text literals or intrinsic attributes as children.
 * Like other {@link PromptElement}s, it can specify `priority` to determine how it should be prioritized.
 */
class TextChunk extends promptElement_1.PromptElement {
    render() {
        return vscpp(vscppf, null, this.props.children);
    }
}
exports.TextChunk = TextChunk;
/**
 * A utility for assigning priorities to a list of prompt elements.
 */
class PrioritizedList extends promptElement_1.PromptElement {
    render() {
        const children = this.props.children;
        if (!children) {
            return;
        }
        return (vscpp(vscppf, null, children.map((child, i) => {
            child.props ?? (child.props = {});
            child.props.priority = this.props.descending
                ? // First element in array of children has highest priority
                    this.props.priority - i
                : // Last element in array of children has highest priority
                    this.props.priority - children.length + i;
            return child;
        })));
    }
}
exports.PrioritizedList = PrioritizedList;
